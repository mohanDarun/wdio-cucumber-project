<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create a Custom Component</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #1e1e1e;
            color: #d4d4d4;
            height: 100vh;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .popup-trigger {
            background: linear-gradient(135deg, #007acc, #005a9e);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 18px;
            font-weight: 600;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 122, 204, 0.3);
        }

        .popup-trigger::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }

        .popup-trigger:hover::before {
            width: 300px;
            height: 300px;
        }

        .popup-trigger:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 122, 204, 0.5);
        }

        .popup-trigger:active {
            transform: translateY(0);
        }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.85);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            padding: 20px;
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            width: 100%;
            max-width: 1200px;
            height: 90vh;
            max-height: 800px;
            background-color: #252526;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
            transform: scale(0.9);
            transition: transform 0.3s ease;
            display: flex;
            flex-direction: column;
        }

        .modal-overlay.active .modal-content {
            transform: scale(1);
        }

        .modal-header {
            background-color: #2d2d30;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #3e3e42;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: #ffffff;
        }

        .close-button {
            background: none;
            border: none;
            color: #cccccc;
            font-size: 24px;
            cursor: pointer;
            width: 32px;
            height: 32px;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 4px;
            transition: all 0.2s ease;
        }

        .close-button:hover {
            background-color: #3e3e42;
            color: #ffffff;
        }

        .modal-body {
            flex-grow: 1;
            display: flex;
            overflow: hidden;
            flex-direction: column;
        }

        .left-section {
            width: 100%;
            background-color: #252526;
            padding: 20px;
            overflow-y: auto;
            border-right: 1px solid #3e3e42;
            scrollbar-width: thin;
            scrollbar-color: #3e3e42 #2d2d30;
        }

        .left-section::-webkit-scrollbar {
            width: 8px;
        }

        .left-section::-webkit-scrollbar-track {
            background: #2d2d30;
        }

        .left-section::-webkit-scrollbar-thumb {
            background-color: #3e3e42;
            border-radius: 4px;
        }

        .left-section::-webkit-scrollbar-thumb:hover {
            background-color: #4e4e52;
        }

        .right-section {
            width: 100%;
            background-color: #1e1e1e;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            scrollbar-width: thin;
            scrollbar-color: #3e3e42 #1e1e1e;
        }

        .right-section::-webkit-scrollbar {
            width: 8px;
        }

        .right-section::-webkit-scrollbar-track {
            background: #1e1e1e;
        }

        .right-section::-webkit-scrollbar-thumb {
            background-color: #3e3e42;
            border-radius: 4px;
        }

        .right-section::-webkit-scrollbar-thumb:hover {
            background-color: #4e4e52;
        }

        .title {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 20px;
            color: #ffffff;
            animation: fadeIn 0.8s ease;
        }

        .step {
            margin-bottom: 10px;
            border-radius: 4px;
            overflow: hidden;
            background-color: #2d2d30;
            border: 1px solid #3e3e42;
            transition: all 0.3s ease;
            animation: slideIn 0.5s ease forwards;
            opacity: 0;
            transform: translateY(20px);
        }

        .step:nth-child(2) {
            animation-delay: 0.1s;
        }

        .step:nth-child(3) {
            animation-delay: 0.2s;
        }

        .step:nth-child(4) {
            animation-delay: 0.3s;
        }

        @keyframes slideIn {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }

        .step-header {
            padding: 12px 15px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #2d2d30;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .step-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
            transition: left 0.5s;
        }

        .step-header:hover::before {
            left: 100%;
        }

        .step-header:hover {
            background-color: #3e3e42;
            transform: translateX(5px);
        }

        .step-header.active {
            background-color: #094771;
            box-shadow: 0 0 10px rgba(0, 122, 204, 0.5);
        }

        .step-title {
            font-weight: 500;
            font-size: 14px;
            z-index: 1;
        }

        .step-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            background-color: #2d2d30;
        }

        .step-content-inner {
            padding: 15px;
            border-top: 1px solid #3e3e42;
            animation: fadeIn 0.5s ease;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            height: 100%;
        }

        .step-description {
            font-size: 13px;
            line-height: 1.5;
            color: #cccccc;
            margin-bottom: 15px;
            flex-grow: 1;
        }

        .next-button {
            display: flex;
            align-items: center;
            gap: 8px;
            color: #a4aab5;
            font-family: sans-serif;
            font-size: 14px;
            background-color: #2e323a;
            padding: 6px 10px;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s ease;
            align-self: flex-end;
            margin-top: 10px;
        }

        .next-button:hover {
            background-color: #3e424a;
            transform: translateY(-1px);
        }

        .next-button:active {
            transform: translateY(0);
        }

        .arrow-circle {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 20px;
            height: 20px;
            border-radius: 50%;
        }

        .arrow-icon {
            display: inline-block;
            width: 0;
            height: 0;
            border-left: 4px solid transparent;
            border-right: 4px solid transparent;
            border-top: 4px solid #a4aab5;
            transform: rotate(-90deg);
            transition: transform 0.3s ease;
        }

        .next-button:hover .arrow-icon {
            transform: rotate(-90deg) translateX(1px);
        }

        .code-container {
            flex-grow: 1;
            background-color: #1e1e1e;
            border-radius: 4px;
            overflow: hidden;
            border: 1px solid #3e3e42;
            animation: fadeIn 0.8s ease;
            display: flex;
            flex-direction: column;
            min-height: 300px;
        }

        .code-header {
            background-color: #2d2d30;
            padding: 8px 15px;
            border-bottom: 1px solid #3e3e42;
            font-size: 13px;
            color: #cccccc;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .code-file-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .code-file-icon {
            width: 16px;
            height: 16px;
            background-color: #007acc;
            border-radius: 2px;
        }

        .copy-button {
            background: none;
            border: none;
            color: #cccccc;
            cursor: pointer;
            padding: 4px 8px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: all 0.2s ease;
            font-size: 13px;
        }

        .copy-button:hover {
            background-color: #3e3e42;
            color: #ffffff;
        }

        .copy-button svg {
            width: 16px;
            height: 16px;
        }

        .copy-success {
            color: #4ec9b0;
        }

        .code-content {
            padding: 15px;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            overflow-x: auto;
            white-space: pre;
            animation: fadeIn 0.5s ease;
            position: relative;
        }

        .code-keyword {
            color: #569cd6;
        }

        .code-function {
            color: #dcdcaa;
        }

        .code-string {
            color: #ce9178;
        }

        .code-tag {
            color: #569cd6;
        }

        .code-attribute {
            color: #9cdcfe;
        }

        .code-comment {
            color: #6a9955;
        }

        .code-bracket {
            color: #d4d4d4;
        }

        .code-operator {
            color: #d4d4d4;
        }

        .code-variable {
            color: #9cdcfe;
        }

        .code-text {
            color: #d4d4d4;
        }

        .step.active .step-content {
            box-shadow: inset 0 0 10px rgba(0, 122, 204, 0.3);
        }

        /* Muted non-highlighted code with low saturation */
        .code-content.muted .code-keyword,
        .code-content.muted .code-function,
        .code-content.muted .code-string,
        .code-content.muted .code-tag,
        .code-content.muted .code-attribute,
        .code-content.muted .code-comment,
        .code-content.muted .code-bracket,
        .code-content.muted .code-operator,
        .code-content.muted .code-variable,
        .code-content.muted .code-text {
            opacity: 0.5;
            filter: saturate(30%);
            transition: all 0.3s ease;
        }

        .code-highlight {
            position: relative;
            display: inline-block;
            z-index: 1;
            background-color: rgba(0, 122, 204, 0.08);
            border-radius: 3px;
            padding: 2px 4px;
            margin: -2px 0;
        }

        /* Ensure highlighted code has vivid, unaltered colors */
        .code-highlight .code-keyword {
            color: #569cd6 !important;
            opacity: 1 !important;
            filter: none !important;
        }

        .code-highlight .code-function {
            color: #dcdcaa !important;
            opacity: 1 !important;
            filter: none !important;
        }

        .code-highlight .code-string {
            color: #ce9178 !important;
            opacity: 1 !important;
            filter: none !important;
        }

        .code-highlight .code-tag {
            color: #569cd6 !important;
            opacity: 1 !important;
            filter: none !important;
        }

        .code-highlight .code-attribute {
            color: #9cdcfe !important;
            opacity: 1 !important;
            filter: none !important;
        }

        .code-highlight .code-comment {
            color: #6a9955 !important;
            opacity: 1 !important;
            filter: none !important;
        }

        .code-highlight .code-bracket {
            color: #d4d4d4 !important;
            opacity: 1 !important;
            filter: none !important;
        }

        .code-highlight .code-operator {
            color: #d4d4d4 !important;
            opacity: 1 !important;
            filter: none !important;
        }

        .code-highlight .code-variable {
            color: #9cdcfe !important;
            opacity: 1 !important;
            filter: none !important;
        }

        .code-highlight .code-text {
            color: #d4d4d4 !important;
            opacity: 1 !important;
            filter: none !important;
        }

        /* Responsive Design */
        @media (min-width: 768px) {
            .modal-body {
                flex-direction: row;
            }

            .left-section {
                width: 35%;
                border-right: 1px solid #3e3e42;
            }

            .right-section {
                width: 65%;
            }

            .title {
                font-size: 24px;
            }

            .step-title {
                font-size: 14px;
            }

            .step-description {
                font-size: 13px;
            }

            .code-content {
                font-size: 14px;
            }
        }

        @media (max-width: 767px) {
            .modal-content {
                height: 95vh;
                max-height: none;
            }

            .modal-header {
                padding: 12px 15px;
            }

            .modal-title {
                font-size: 16px;
            }

            .close-button {
                font-size: 20px;
                width: 28px;
                height: 28px;
            }

            .left-section {
                border-right: none;
                border-bottom: 1px solid #3e3e42;
                max-height: 40vh;
            }

            .right-section {
                flex-grow: 1;
            }

            .title {
                font-size: 20px;
                margin-bottom: 15px;
            }

            .step-header {
                padding: 10px 12px;
            }

            .step-title {
                font-size: 13px;
            }

            .step-content-inner {
                padding: 12px;
            }

            .step-description {
                font-size: 12px;
                line-height: 1.4;
            }

            .next-button {
                font-size: 13px;
                padding: 5px 8px;
                gap: 6px;
            }

            .arrow-circle {
                width: 18px;
                height: 18px;
            }

            .arrow-icon {
                border-left: 3px solid transparent;
                border-right: 3px solid transparent;
                border-top: 3px solid #a4aab5;
            }

            .code-header {
                padding: 6px 12px;
                font-size: 12px;
            }

            .code-content {
                font-size: 12px;
                padding: 12px;
                line-height: 1.4;
            }

            .copy-button {
                font-size: 12px;
                padding: 3px 6px;
            }

            .copy-button svg {
                width: 14px;
                height: 14px;
            }
        }

        @media (max-width: 480px) {
            .modal-overlay {
                padding: 10px;
            }

            .modal-content {
                border-radius: 6px;
            }

            .modal-header {
                padding: 10px 12px;
            }

            .modal-title {
                font-size: 14px;
            }

            .close-button {
                font-size: 18px;
                width: 24px;
                height: 24px;
            }

            .left-section {
                padding: 15px;
                max-height: 35vh;
            }

            .right-section {
                padding: 15px;
            }

            .title {
                font-size: 18px;
                margin-bottom: 12px;
            }

            .step-header {
                padding: 8px 10px;
            }

            .step-title {
                font-size: 12px;
            }

            .step-content-inner {
                padding: 10px;
            }

            .step-description {
                font-size: 11px;
                line-height: 1.3;
                margin-bottom: 10px;
            }

            .next-button {
                font-size: 12px;
                padding: 4px 6px;
                gap: 5px;
                margin-top: 8px;
            }

            .arrow-circle {
                width: 16px;
                height: 16px;
            }

            .arrow-icon {
                border-left: 2.5px solid transparent;
                border-right: 2.5px solid transparent;
                border-top: 2.5px solid #a4aab5;
            }

            .code-header {
                padding: 5px 10px;
                font-size: 11px;
            }

            .code-content {
                font-size: 11px;
                padding: 10px;
                line-height: 1.3;
            }

            .copy-button {
                font-size: 11px;
                padding: 2px 4px;
            }

            .copy-button svg {
                width: 12px;
                height: 12px;
            }
        }

        @media (max-width: 320px) {
            .modal-title {
                font-size: 12px;
            }

            .title {
                font-size: 16px;
            }

            .step-title {
                font-size: 11px;
            }

            .step-description {
                font-size: 10px;
            }

            .next-button {
                font-size: 11px;
            }

            .code-header {
                font-size: 10px;
            }

            .code-content {
                font-size: 10px;
            }
        }
    </style>
</head>
<body>
    <button class="popup-trigger" id="popupTrigger">Click Me</button>

    <div class="modal-overlay" id="modalOverlay">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Create a Custom Component</div>
                <button class="close-button" id="closeButton">&times;</button>
            </div>
            <div class="modal-body">
                <div class="left-section">
                    <h1 class="title">Create a Custom Component</h1>
                    
                    <div class="step" id="step1">
                        <div class="step-header">
                            <div class="step-title">1. Component Definition</div>
                        </div>
                        <div class="step-content">
                            <div class="step-content-inner">
                                <div class="step-description">
                                    <p>The component definition includes the function signature and props destructuring. This section defines how the component will receive and handle its props.</p>
                                </div>
                                <button class="next-button" data-next="step2">
                                    Next
                                    <div class="arrow-circle">
                                        <span class="arrow-icon"></span>
                                    </div>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="step" id="step2">
                        <div class="step-header">
                            <div class="step-title">2. JSX Structure</div>
                        </div>
                        <div class="step-content">
                            <div class="step-content-inner">
                                <div class="step-description">
                                    <p>The JSX structure defines what the component renders. This includes the layout, styling, and where the children content will be placed within the component.</p>
                                </div>
                                <button class="next-button" data-next="step3">
                                    Next
                                    <div class="arrow-circle">
                                        <span class="arrow-icon"></span>
                                    </div>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="step" id="step3">
                        <div class="step-header">
                            <div class="step-title">3. Component Usage</div>
                        </div>
                        <div class="step-content">
                            <div class="step-content-inner">
                                <div class="step-description">
                                    <p>The component usage shows how to implement the component in your application. This demonstrates passing children content to the component and how it renders in the final UI.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="right-section">
                    <div class="code-container">
                        <div class="code-header">
                            <div class="code-file-info">
                                <div class="code-file-icon"></div>
                                <span>ExampleComponent.js</span>
                            </div>
                            <button class="copy-button" id="copyButton">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                                </svg>
                                <span id="copyText">Copy</span>
                            </button>
                        </div>
                        <div class="code-content" id="codeDisplay">
<span class="code-comment">// Select a step to view the code</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const popupTrigger = document.getElementById('popupTrigger');
            const modalOverlay = document.getElementById('modalOverlay');
            const closeButton = document.getElementById('closeButton');
            const steps = document.querySelectorAll('.step');
            const codeDisplay = document.getElementById('codeDisplay');
            const copyButton = document.getElementById('copyButton');
            const copyText = document.getElementById('copyText');
            
            const plainCode = `export const ExampleComponent = ({ children }) => {
  return (
    <div className="flex items-center h-full w-full">
      <div className="bg-gray-800 rounded-md p-6 m-4">
        {children}
      </div>
    </div>
  );
};

<ExampleComponent>
  Here's a very simple example component rather than an empty state. This should help you figure out what's happening quicker and see what's possible with custom components!
</ExampleComponent>`;
            
            const codeContents = {
                step1: `<div class="code-highlight"><span class="code-keyword">export</span> <span class="code-keyword">const</span> <span class="code-function">ExampleComponent</span> = <span class="code-bracket">(</span><span class="code-bracket">{</span> <span class="code-variable">children</span> <span class="code-bracket">}</span><span class="code-bracket">)</span> <span class="code-operator">=></span> <span class="code-bracket">{</span></div>
  <span class="code-keyword">return</span> <span class="code-bracket">(</span>
    <span class="code-tag">&lt;div</span> <span class="code-attribute">className</span>=<span class="code-string">"flex items-center h-full w-full"</span><span class="code-tag">&gt;</span>
      <span class="code-tag">&lt;div</span> <span class="code-attribute">className</span>=<span class="code-string">"bg-gray-800 rounded-md p-6 m-4"</span><span class="code-tag">&gt;</span>
        <span class="code-bracket">{</span><span class="code-variable">children</span><span class="code-bracket">}</span>
      <span class="code-tag">&lt;/div&gt;</span>
    <span class="code-tag">&lt;/div&gt;</span>
  <span class="code-bracket">)</span>;
<span class="code-bracket">}</span>;

<span class="code-tag">&lt;ExampleComponent&gt;</span>
  <span class="code-text">Here's a very simple example component rather than an empty state. This should help you figure out what's happening quicker and see what's possible with custom components!</span>
<span class="code-tag">&lt;/ExampleComponent&gt;</span>`,

                step2: `<span class="code-keyword">export</span> <span class="code-keyword">const</span> <span class="code-function">ExampleComponent</span> = <span class="code-bracket">(</span><span class="code-bracket">{</span> <span class="code-variable">children</span> <span class="code-bracket">}</span><span class="code-bracket">)</span> <span class="code-operator">=></span> <span class="code-bracket">{</span>
  <span class="code-keyword">return</span> <span class="code-bracket">(</span>
    <div class="code-highlight"><span class="code-tag">&lt;div</span> <span class="code-attribute">className</span>=<span class="code-string">"flex items-center h-full w-full"</span><span class="code-tag">&gt;</span>
      <span class="code-tag">&lt;div</span> <span class="code-attribute">className</span>=<span class="code-string">"bg-gray-800 rounded-md p-6 m-4"</span><span class="code-tag">&gt;</span>
        <span class="code-bracket">{</span><span class="code-variable">children</span><span class="code-bracket">}</span>
      <span class="code-tag">&lt;/div&gt;</span>
    <span class="code-tag">&lt;/div&gt;</span></div>
  <span class="code-bracket">)</span>;
<span class="code-bracket">}</span>;

<span class="code-tag">&lt;ExampleComponent&gt;</span>
  <span class="code-text">Here's a very simple example component rather than an empty state. This should help you figure out what's happening quicker and see what's possible with custom components!</span>
<span class="code-tag">&lt;/ExampleComponent&gt;</span>`,

                step3: `<span class="code-keyword">export</span> <span class="code-keyword">const</span> <span class="code-function">ExampleComponent</span> = <span class="code-bracket">(</span><span class="code-bracket">{</span> <span class="code-variable">children</span> <span class="code-bracket">}</span><span class="code-bracket">)</span> <span class="code-operator">=></span> <span class="code-bracket">{</span>
  <span class="code-keyword">return</span> <span class="code-bracket">(</span>
    <span class="code-tag">&lt;div</span> <span class="code-attribute">className</span>=<span class="code-string">"flex items-center h-full w-full"</span><span class="code-tag">&gt;</span>
      <span class="code-tag">&lt;div</span> <span class="code-attribute">className</span>=<span class="code-string">"bg-gray-800 rounded-md p-6 m-4"</span><span class="code-tag">&gt;</span>
        <span class="code-bracket">{</span><span class="code-variable">children</span><span class="code-bracket">}</span>
      <span class="code-tag">&lt;/div&gt;</span>
    <span class="code-tag">&lt;/div&gt;</span>
  <span class="code-bracket">)</span>;
<span class="code-bracket">}</span>;

<div class="code-highlight"><span class="code-tag">&lt;ExampleComponent&gt;</span>
  <span class="code-text">Here's a very simple example component rather than an empty state. This should help you figure out what's happening quicker and see what's possible with custom components!</span>
<span class="code-tag">&lt;/ExampleComponent&gt;</span></div>`
            };
            
            // Copy functionality
            copyButton.addEventListener('click', () => {
                navigator.clipboard.writeText(plainCode).then(() => {
                    copyText.textContent = 'Copied!';
                    copyButton.classList.add('copy-success');
                    
                    setTimeout(() => {
                        copyText.textContent = 'Copy';
                        copyButton.classList.remove('copy-success');
                    }, 2000);
                }).catch(err => {
                    console.error('Failed to copy: ', err);
                });
            });
            
            // Open popup when trigger button is clicked
            popupTrigger.addEventListener('click', () => {
                modalOverlay.classList.add('active');
                
                // Initialize with step 1 active when popup opens
                setTimeout(() => {
                    const step1 = document.getElementById('step1');
                    step1.classList.add('active');
                    step1.querySelector('.step-content').style.maxHeight = step1.querySelector('.step-content-inner').scrollHeight + 'px';
                    codeDisplay.innerHTML = codeContents.step1;
                    codeDisplay.classList.add('muted');
                }, 300);
            });
            
            // Close popup when close button is clicked
            closeButton.addEventListener('click', () => {
                modalOverlay.classList.remove('active');
                
                // Reset all steps when closing
                steps.forEach(step => {
                    step.classList.remove('active');
                    step.querySelector('.step-content').style.maxHeight = '0';
                });
            });
            
            // Close popup when clicking outside the modal content
            modalOverlay.addEventListener('click', (e) => {
                if (e.target === modalOverlay) {
                    modalOverlay.classList.remove('active');
                    
                    // Reset all steps when closing
                    steps.forEach(step => {
                        step.classList.remove('active');
                        step.querySelector('.step-content').style.maxHeight = '0';
                    });
                }
            });
            
            steps.forEach(step => {
                const header = step.querySelector('.step-header');
                const content = step.querySelector('.step-content');
                const contentInner = step.querySelector('.step-content-inner');
                const nextButton = step.querySelector('.next-button');
                
                header.addEventListener('click', () => {
                    // Close all steps
                    steps.forEach(s => {
                        if (s !== step) {
                            s.classList.remove('active');
                            s.querySelector('.step-content').style.maxHeight = '0';
                        }
                    });
                    
                    // Toggle current step
                    step.classList.toggle('active');
                    
                    if (step.classList.contains('active')) {
                        content.style.maxHeight = contentInner.scrollHeight + 'px';
                        // Update code display
                        codeDisplay.innerHTML = codeContents[step.id];
                        codeDisplay.classList.add('muted');
                    } else {
                        content.style.maxHeight = '0';
                    }
                });
                
                // Handle next button clicks
                if (nextButton) {
                    nextButton.addEventListener('click', (e) => {
                        e.stopPropagation();
                        const nextStepId = nextButton.getAttribute('data-next');
                        const nextStep = document.getElementById(nextStepId);
                        
                        if (nextStep) {
                            // Close current step
                            step.classList.remove('active');
                            content.style.maxHeight = '0';
                            
                            // Open next step
                            setTimeout(() => {
                                nextStep.classList.add('active');
                                const nextContent = nextStep.querySelector('.step-content');
                                const nextContentInner = nextStep.querySelector('.step-content-inner');
                                nextContent.style.maxHeight = nextContentInner.scrollHeight + 'px';
                                codeDisplay.innerHTML = codeContents[nextStepId];
                                codeDisplay.classList.add('muted');
                                
                                // Scroll to next step
                                nextStep.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                            }, 300);
                        }
                    });
                }
            });
        });
    </script>
</body>
</html>
