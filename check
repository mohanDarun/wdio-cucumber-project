namespace Drupal\your_module\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Mail\MailManagerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

class UserFeedbackForm extends FormBase {

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'user_feedback_form';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {

    $form['was_helpful'] = [
      '#type' => 'radios',
      '#title' => $this->t('Was this helpful?'),
      '#options' => ['Yes' => 'Yes', 'No' => 'No'],
      '#required' => TRUE,
      '#ajax' => [
        'callback' => '::updateTextarea',
        'event' => 'change',
        'wrapper' => 'feedback-textarea-wrapper',
      ],
    ];

    $form['feedback_optional_wrapper'] = [
      '#type' => 'container',
      '#attributes' => ['id' => 'feedback-textarea-wrapper'],
    ];

    if ($form_state->getValue('was_helpful') === 'Yes') {
      $form['feedback_optional_wrapper']['feedback_optional'] = [
        '#type' => 'textarea',
        '#title' => $this->t('Feedback (optional)'),
        '#attributes' => [
          'placeholder' => $this->t('Care to elaborate?'),
        ],
      ];
    }

    $form['page_id'] = [
      '#type' => 'hidden',
      '#value' => \Drupal::request()->getRequestUri(),
    ];

    // reCAPTCHA support (assumes recaptcha module is installed and configured)
    $form['captcha'] = [
      '#type' => 'recaptcha',
      '#captcha_type' => 'v3',
      '#captcha_action' => 'default_action',
    ];

    $form['actions']['submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Submit feedback'),
    ];

    return $form;
  }

  /**
   * AJAX callback for showing textarea.
   */
  public function updateTextarea(array &$form, FormStateInterface $form_state) {
    return $form['feedback_optional_wrapper'];
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'your_module';
    $key = 'feedback_submission';
    $to = 'your.email@example.com'; // Update with real recipient
    $langcode = \Drupal::currentUser()->getPreferredLangcode();

    $params['subject'] = 'Dev Portal user feedback';
    $params['message'] = "Date: " . date('m-d-Y') . "\n"
      . "Submitted by: Anonymous\n"
      . "Was this helpful?: " . $form_state->getValue('was_helpful') . "\n"
      . "Feedback provided: " . $form_state->getValue('feedback_optional') . "\n"
      . "Page ID: " . $form_state->getValue('page_id');

    $send = TRUE;
    $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);

    \Drupal::messenger()->addMessage($this->t('Thank you for your feedback.'));
  }

}


/**
 * Implements hook_schema().
 */
function user_feedback_form_schema() {
  $schema['user_feedback_data'] = [
    'description' => 'Stores user feedback from the feedback form.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary ID.',
      ],
      'was_helpful' => [
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'description' => 'Indicates if the user found the page helpful.',
      ],
      'feedback' => [
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'Optional user feedback text.',
      ],
      'page_id' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The page URL or identifier where the feedback was submitted.',
      ],
      'submitted' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'UNIX timestamp of submission.',
      ],
    ],
    'primary key' => ['id'],
  ];

  return $schema;
}
