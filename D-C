namespace Drupal\your_module\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Database\Database;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\recaptcha\ReCaptchaValidator;

class FeedbackForm extends FormBase {

  protected $recaptchaValidator;

  public function __construct(ReCaptchaValidator $recaptchaValidator) {
    $this->recaptchaValidator = $recaptchaValidator;
  }

  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('recaptcha.validator')
    );
  }

  public function getFormId() {
    return 'custom_feedback_form';
  }

  public function buildForm(array $form, FormStateInterface $form_state) {

    $form['page_id'] = [
      '#type' => 'hidden',
      '#value' => \Drupal::request()->getRequestUri(),
    ];

    $form['was_helpful'] = [
      '#type' => 'container',
      '#attributes' => ['class' => ['button-group']],
    ];

    $form['was_helpful']['yes'] = [
      '#type' => 'submit',
      '#value' => $this->t('Yes'),
      '#submit' => [[$this, 'storeValueYes']],
      '#limit_validation_errors' => [],
      '#ajax' => [
        'callback' => '::ajaxShowFeedback',
        'wrapper' => 'feedback-container',
      ],
    ];

    $form['was_helpful']['no'] = [
      '#type' => 'submit',
      '#value' => $this->t('No'),
      '#submit' => [[$this, 'storeValueNo']],
      '#limit_validation_errors' => [],
      '#ajax' => [
        'callback' => '::ajaxShowFeedback',
        'wrapper' => 'feedback-container',
      ],
    ];

    $form['was_helpful_value'] = [
      '#type' => 'hidden',
      '#default_value' => $form_state->get('was_helpful'),
    ];

    $form['feedback_container'] = [
      '#type' => 'container',
      '#attributes' => ['id' => 'feedback-container'],
    ];

    if ($form_state->get('was_helpful') === 'No') {
      $form['feedback_container']['feedback'] = [
        '#type' => 'textarea',
        '#title' => $this->t('Feedback'),
        '#description' => $this->t('Care to elaborate?'),
      ];
    }

    // reCAPTCHA V3
    $form['captcha'] = [
      '#type' => 'recaptcha',
      '#attributes' => ['data-action' => 'submit'],
    ];

    $form['submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Submit feedback'),
      '#states' => [
        'visible' => [
          ':input[name="was_helpful_value"]' => ['value' => 'No'],
        ],
      ],
    ];

    return $form;
  }

  public function ajaxShowFeedback(array &$form, FormStateInterface $form_state) {
    return $form['feedback_container'];
  }

  public function storeValueYes(array &$form, FormStateInterface $form_state) {
    $form_state->set('was_helpful', 'Yes');
    $form_state->setRebuild();
  }

  public function storeValueNo(array &$form, FormStateInterface $form_state) {
    $form_state->set('was_helpful', 'No');
    $form_state->setRebuild();
  }

  public function validateForm(array &$form, FormStateInterface $form_state) {
    $response = $form_state->getValue('captcha');
    $result = $this->recaptchaValidator->validateResponse($response, 'submit');

    if (!$result->isSuccess()) {
      $form_state->setErrorByName('captcha', $this->t('CAPTCHA validation failed.'));
    }
  }

  public function submitForm(array &$form, FormStateInterface $form_state) {
    $connection = Database::getConnection();
    $connection->insert('user_feedback')
      ->fields([
        'page_id' => $form_state->getValue('page_id'),
        'was_helpful' => $form_state->get('was_helpful'),
        'feedback' => $form_state->getValue(['feedback_container', 'feedback']),
        'submitted' => \Drupal::time()->getCurrentTime(),
      ])
      ->execute();

    // Send mail.
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'your_module';
    $key = 'feedback_notify';
    $to = 'your_email@domain.com';
    $params['message'] = 
      "Was this helpful?: " . $form_state->get('was_helpful') . "\n" .
      "Feedback: " . $form_state->getValue(['feedback_container', 'feedback']) . "\n" .
      "Page ID: " . $form_state->getValue('page_id');
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $send = true;

    $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);

    \Drupal::messenger()->addStatus($this->t('Thank you for helping improve Key\'s documentation. Your response was submitted.'));
  }
}
